!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.hangul=e():t.hangul=e()}("undefined"!=typeof self?self:this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if("string"!=typeof t||0===t.length)return!1;(!e||e<0||e>t.length)&&(e=t.length);for(var n=0;n<e;n++){var r=t.charCodeAt(n);if(r<44032||r>55203)return!1}return!0}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t,1)?i.default[parseInt(((65535&t.charCodeAt(0))-44032)%588%28)]:"string"==typeof t?t.charAt(0):t};var u=n(0),o=r(u),f=n(8),i=r(f)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t,1)&&""!==(0,i.default)(t)};var u=n(0),o=r(u),f=n(1),i=r(f)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var u=n(0),o=r(u),f=n(4),i=r(f),l=n(6),a=r(l),d=n(1),c=r(d),s=n(2),p=r(s),g=n(9),h=r(g),_=n(10),y=r(_);e.default={is:o.default,initial:i.default,vowel:a.default,under:c.default,hasUnder:p.default,hasLastUnder:h.default,formatNumber:y.default},String.prototype.isHangul=function(t){return(0,o.default)(this.toString(),t)},String.prototype.hangulInitial=function(){return(0,i.default)(this.toString())},String.prototype.hangulVowel=function(){return(0,a.default)(this.toString())},String.prototype.hangulUnder=function(){return(0,c.default)(this.toString())},String.prototype.hasHangulUnder=function(){return(0,p.default)(this.toString())},String.prototype.hasLastHangulUnder=function(){return(0,h.default)(this.toString())},String.prototype.toHangulNumber=function(t){return(0,y.default)(this.toString(),t)},Number.prototype.toHangul=function(t){return(0,y.default)(this.toString(),t)}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t,1)?i.default[parseInt(((65535&t.charCodeAt(0))-44032)/588)]:"string"==typeof t?t.charAt(0):t};var u=n(0),o=r(u),f=n(5),i=r(f)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(t,1)?i.default[parseInt(((65535&t.charCodeAt(0))-44032)%588/28)]:"string"==typeof t?t.charAt(0):t};var u=n(0),o=r(u),f=n(7),i=r(f)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=["ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=["","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return"string"==typeof t&&0!==t.length&&(0,u.default)(t.charAt(t.length-1))};var r=n(2),u=function(t){return t&&t.__esModule?t:{default:t}}(r)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(void 0===t)throw new TypeError("'number' is undefined");if("string"!=typeof t&&(t=t.toString()),!/^[0-9]+$/.test(t))return t;if("0"===t.charAt(0))for(var n=1;n<t.length;n++)if("0"!==t.charAt(n)){t=t.substring(n);break}if(0===t.length)return o.default[0];if(1===t.length)return o.default[t.charAt(0)];for(var r=t.split("").map(function(t){return parseInt(t)}),u=r.reverse(),f=[],l=0;l<u.length;l+=4)f.push(u.slice(l,l+4));return f.map(function(t,e){var n=t.map(function(t,e){return(t>1||0===e&&1===t?o.default[t]:"")+(t>0&&e>0?i.default[0][e-1]:"")}).reduce(function(t,e){return e+t});return n+(e>0&&n.length>0?i.default[1][(e-1)%4]:"")}).filter(function(t){return t.length>0}).reduce(function(t,n){return n+(e||"")+t})};var u=n(11),o=r(u),f=n(12),i=r(f)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=["영","일","이","삼","사","오","육","칠","팔","구"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=[["십","백","천"],["만","억","조","경"]]}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,