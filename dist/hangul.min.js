!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.hangul=e():t.hangul=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var u=n[r]={exports:{},id:r,loaded:!1};return t[r].call(u.exports,u,u.exports,e),u.loaded=!0,u.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var u=n(1),o=r(u),f=n(2),i=r(f),a=n(4),l=r(a),d=n(6),c=r(d),s=n(8),p=r(s),g=n(9),h=r(g),_=n(10),y=r(_);e["default"]={is:o["default"],initial:i["default"],vowel:l["default"],under:c["default"],hasUnder:p["default"],hasLastUnder:h["default"],formatNumber:y["default"]},String.prototype.isHangul=function(t){return(0,o["default"])(this.toString(),t)},String.prototype.hangulInitial=function(){return(0,i["default"])(this.toString())},String.prototype.hangulVowel=function(){return(0,l["default"])(this.toString())},String.prototype.hangulUnder=function(){return(0,c["default"])(this.toString())},String.prototype.hasHangulUnder=function(){return(0,p["default"])(this.toString())},String.prototype.hasLastHangulUnder=function(){return(0,h["default"])(this.toString())},String.prototype.toHangulNumber=function(t){return(0,y["default"])(this.toString(),t)},Number.prototype.toHangul=function(t){return(0,y["default"])(this.toString(),t)}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t,e){if("string"!=typeof t||0===t.length)return!1;(!e||0>e||e>t.length)&&(e=t.length);for(var n=0;e>n;n++){var r=t.charCodeAt(n);if(44032>r||r>55203)return!1}return!0}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return(0,o["default"])(t,1)?i["default"][parseInt(((65535&t.charCodeAt(0))-44032)/588)]:"string"==typeof t?t.charAt(0):t};var u=n(1),o=r(u),f=n(3),i=r(f)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return(0,o["default"])(t,1)?i["default"][parseInt(((65535&t.charCodeAt(0))-44032)%588/28)]:"string"==typeof t?t.charAt(0):t};var u=n(1),o=r(u),f=n(5),i=r(f)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=["ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return(0,o["default"])(t,1)?i["default"][parseInt(((65535&t.charCodeAt(0))-44032)%588%28)]:"string"==typeof t?t.charAt(0):t};var u=n(1),o=r(u),f=n(7),i=r(f)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=["","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return(0,o["default"])(t,1)&&""!==(0,i["default"])(t)};var u=n(1),o=r(u),f=n(6),i=r(f)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return"string"!=typeof t||0===t.length?!1:(0,o["default"])(t.charAt(t.length-1))};var u=n(8),o=r(u)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t,e){if("undefined"==typeof t)throw new TypeError("'number' is undefined");if("string"!=typeof t&&(t=t.toString()),!/^[0-9]+$/.test(t))return t;if("0"===t.charAt(0))for(var n=1;n<t.length;n++)if("0"!==t.charAt(n)){t=t.substring(n);break}if(0===t.length)return o["default"][0];if(1===t.length)return o["default"][t.charAt(0)];for(var r=t.split("").map(function(t){return parseInt(t)}),u=r.reverse(),f=[],a=0;a<u.length;a+=4)f.push(u.slice(a,a+4));return f.map(function(t,e){var n=t.map(function(t,e){var n=t>1||0===e&&1===t?o["default"][t]:"",r=t>0&&e>0?i["default"][0][e-1]:"";return n+r}).reduce(function(t,e){return e+t}),r=e>0&&n.length>0?i["default"][1][(e-1)%4]:"";return n+r}).filter(function(t){return t.length>0}).reduce(function(t,n){return n+(e||"")+t})};var u=n(11),o=r(u),f=n(12),i=r(f)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=["영","일","이","삼","사","오","육","칠","팔","구"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=[["십","백","천"],["만","억","조","경"]]}])});
//# sourceMappingURL=data:application/json;base64,
